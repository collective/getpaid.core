GetPaid Core Order API
==============

Workflow Tests
--------------

Let's first create an Order object to work with:

   >>> from getpaid.core.order import Order
   >>> testorder = Order()

Now we'll test the order workflow...

Before we fire the 'create' transition we don't have a workflow states
for finance and fulfillment

   >>> state = testorder.fulfillment_state
   >>> print state
   None

   >>> state = testorder.finance_state
   >>> print state
   None

Firing the 'create' transition in the finance workflow should put us 
in the REVIEWING state
 
   >>> testorder.finance_workflow.fireTransition('create')
   >>> state = testorder.finance_state
   >>> print state
   REVIEWING

Firing some more transitions to test the finance workflow.  

   >>> testorder.finance_workflow.fireTransition('authorize')
   >>> state = testorder.finance_state
   >>> print state
   CHARGEABLE

   >>> testorder.finance_workflow.fireTransition('authorize-chargeable')
   >>> state = testorder.finance_state
   >>> print state
   CHARGEABLE

   >>> testorder.finance_workflow.fireTransition('charge-chargeable')
   >>> state = testorder.finance_state
   >>> print state
   CHARGED

Firing the 'create' transition in the fulfillment workflow should put us 
in the REVIEWING state

   >>> testorder.fulfillment_workflow.fireTransition('create')
   >>> state = testorder.fulfillment_state
   >>> print state
   NEW

Testing the fulfillment workflow for a delivered order. We need to re-cast 
the testorder object as we cannot transition back from 

   >>> testorder = Order()
   >>> testorder.fulfillment_workflow.fireTransition('create')
   >>> state = testorder.fulfillment_state
   >>> print state
   NEW

   >>> testorder.fulfillment_workflow.fireTransition('process-order')
   >>> state = testorder.fulfillment_state
   >>> print state
   PROCESSING

   >>> testorder.fulfillment_workflow.fireTransition('deliver-processing-order')
   >>> state = testorder.fulfillment_state
   >>> print state
   DELIVERED

Testing the fulfillment workflow for a cancelled order. We need to re-cast 
the testorder object as we cannot transition back from DELIVERED state.

   >>> testorder2 = Order()

   >>> testorder2.fulfillment_workflow.fireTransition('create')
   >>> state = testorder2.fulfillment_state
   >>> print state
   NEW

   >>> testorder2.fulfillment_workflow.fireTransition('process-order')
   >>> state = testorder2.fulfillment_state
   >>> print state
   PROCESSING

   >>> testorder2.fulfillment_workflow.fireTransition('cancel-order')
   >>> state = testorder2.fulfillment_state
   >>> print state
   WILL_NOT_DELIVER




   
